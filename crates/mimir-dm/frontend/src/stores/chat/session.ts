import { ref, type Ref } from 'vue'
import { invoke } from '@tauri-apps/api/core'
import type { ChatMessage } from './types'

export interface ChatSession {
  id: string
  title: string
  created_at: number
  updated_at: number
  messages: ChatMessage[]
}

export interface ChatSessionMetadata {
  id: string
  title: string
  created_at: number
  updated_at: number
  message_count: number
  preview: string
}

interface SessionState {
  currentSessionId: Ref<string | null>
  sessions: Ref<ChatSessionMetadata[]>
  sessionsLoading: Ref<boolean>
}

interface SessionActions {
  loadSessions: () => Promise<void>
  loadSession: (sessionId: string, onMessagesLoaded: (messages: ChatMessage[]) => void, onTotalTokensUpdate: (tokens: number) => void, onTodosLoaded: (sessionId: string) => Promise<void>) => Promise<void>
  saveCurrentSession: (messages: ChatMessage[]) => Promise<void>
  createNewSession: (onMessagesCleared: () => void, onTotalTokensReset: () => void, onTodosLoaded: (sessionId: string) => Promise<void>) => Promise<void>
  deleteSession: (sessionId: string, onMessagesCleared: () => void, onTotalTokensReset: () => void, onTodosLoaded: (sessionId: string) => Promise<void>) => Promise<void>
  switchToSession: (sessionId: string, onMessagesLoaded: (messages: ChatMessage[]) => void, onTotalTokensUpdate: (tokens: number) => void, onTodosLoaded: (sessionId: string) => Promise<void>) => Promise<void>
}

export function createSessionStore(): SessionState & SessionActions {
  // State
  const currentSessionId = ref<string | null>(null)
  const sessions = ref<ChatSessionMetadata[]>([])
  const sessionsLoading = ref(false)
  const error = ref<string | null>(null)

  // Actions
  const loadSessions = async () => {
    try {
      sessionsLoading.value = true
      const sessionList = await invoke<ChatSessionMetadata[]>('list_chat_sessions')
      sessions.value = sessionList
    } catch (err) {
      console.error('Failed to load sessions:', err)
      error.value = String(err)
    } finally {
      sessionsLoading.value = false
    }
  }

  const loadSession = async (
    sessionId: string,
    onMessagesLoaded: (messages: ChatMessage[]) => void,
    onTotalTokensUpdate: (tokens: number) => void,
    onTodosLoaded: (sessionId: string) => Promise<void>
  ) => {
    try {
      const session = await invoke<ChatSession | null>('load_chat_session', { sessionId })
      if (session) {
        currentSessionId.value = session.id
        onMessagesLoaded(session.messages)
        // Recalculate total tokens from messages
        const totalTokens = session.messages.reduce((total, msg) => {
          return total + (msg.tokenUsage?.total || 0)
        }, 0)
        onTotalTokensUpdate(totalTokens)
        // Load todos for this session
        await onTodosLoaded(session.id)
      }
    } catch (err) {
      console.error('Failed to load session:', err)
      error.value = String(err)
    }
  }

  const saveCurrentSession = async (messages: ChatMessage[]) => {
    if (!currentSessionId.value) return

    try {
      const session: ChatSession = {
        id: currentSessionId.value,
        title: '', // Will be auto-generated by backend
        created_at: 0, // Will be set by backend
        updated_at: Date.now(),
        messages: messages
      }
      await invoke('save_chat_session', { session })
      // Reload sessions to get updated metadata
      await loadSessions()
    } catch (err) {
      console.error('Failed to save session:', err)
      // Don't show error to user for auto-save failures
    }
  }

  const createNewSession = async (
    onMessagesCleared: () => void,
    onTotalTokensReset: () => void,
    onTodosLoaded: (sessionId: string) => Promise<void>
  ) => {
    try {
      const newSession = await invoke<ChatSession>('create_chat_session')
      currentSessionId.value = newSession.id
      onMessagesCleared()
      onTotalTokensReset()
      error.value = null
      // Load todos for new session (should be empty)
      await onTodosLoaded(newSession.id)
      await loadSessions()
    } catch (err) {
      console.error('Failed to create session:', err)
      error.value = String(err)
    }
  }

  const deleteSession = async (
    sessionId: string,
    onMessagesCleared: () => void,
    onTotalTokensReset: () => void,
    onTodosLoaded: (sessionId: string) => Promise<void>
  ) => {
    try {
      const deleted = await invoke<boolean>('delete_chat_session', { sessionId })
      if (deleted) {
        await loadSessions()
        // If we deleted the current session, create a new one
        if (currentSessionId.value === sessionId) {
          await createNewSession(onMessagesCleared, onTotalTokensReset, onTodosLoaded)
        }
      }
    } catch (err) {
      console.error('Failed to delete session:', err)
      error.value = String(err)
    }
  }

  const switchToSession = async (
    sessionId: string,
    onMessagesLoaded: (messages: ChatMessage[]) => void,
    onTotalTokensUpdate: (tokens: number) => void,
    onTodosLoaded: (sessionId: string) => Promise<void>
  ) => {
    if (currentSessionId.value !== sessionId) {
      await loadSession(sessionId, onMessagesLoaded, onTotalTokensUpdate, onTodosLoaded)
    }
  }

  return {
    // State
    currentSessionId,
    sessions,
    sessionsLoading,

    // Actions
    loadSessions,
    loadSession,
    saveCurrentSession,
    createNewSession,
    deleteSession,
    switchToSession
  }
}
